<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="style.css" />
    <title>Введение в "Конструктор блок-схем"</title>
  </head>

  <body topmargin="0" leftmargin="0" bgcolor="#E0E0E0">
    <div align="center">
      <table
        width="100%"
        bgcolor="#E0E0E0"
        bordercolorlight="#A0A0A0"
        border="1"
        bordercolordark="#FFFFFF"
      >
        <tr>
          <td>
            <table width="100%">
              <tr>
                <td>
                  <a href="index.htm">Введение</a> |
                  <a href="sch.htm">Блок-схемы</a> |
                  <a href="operat.htm">Блоки</a> |
                  <a href="interp.htm">Операторы и выражения</a> |
                  <a href="program.htm">Среда</a> |
                  <a href="example.htm">Примеры</a> |
                  <a href="online.htm">Online</a></td>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </div>
    <table cellpadding="10" width="100%" bgcolor="#FFFFFF">
      <tr>
        <td>
          <h2>Запись выражений&nbsp;</h2>
          <p>Формальный язык, используемый в Конструкторе Блок-схем, приближен к языку Паскаль.</p>

          <h3>Константы</h3>
          <p>
            Числовые константы записываются в десятичном формате. Десятичный разделитель — точка. Поддерживается инженерная нотация.
          </p>
          <p>Примеры: <code>2; -177; 255.5; 0.5; 1e-3</code></p>
          <p>Строковые константы записываются в двойных кавычках или в одинарных (апострофах). Эти два вида кавычек взаимозаменяемы.</p>
          <p>Примеры: <code>'строка'; 'Hello, World!'; '123654'; 'Магазин "Продукты"'</code></p>

          <h3>Переменные</h3>
          <p>
            Переменные — это ячейки памяти, где программа может хранить нужные ей промежуточные значения. В переменных можно хранить
            числа и строки. (Также есть возможность использовать массивы, о них ниже).
          </p>

          <p>
            Имя переменной — последовательность латинских букв, цифр и знака подчёркивания (_). Имя переменной не может начинаться с цифры.
          </p>

          <p>Примеры: <code>a; varname; _MyVar_; _; param56</code></p>
          <p>
            При использовании имен переменных в выражениях, имя переменной заменяется хранящимся в ней значением.
          </p>

          <p>
            Для присваивания значения переменной используется оператор <code>:=</code><br/>
            Пример:
            <code>
              a:=5;
              Name:="Петя";
            </code>
          </p>

          <p>
            Объявлять переменные не требуется — вы просто присваиваете ей значение и она создаётся в этот момент. Тип
            переменной определяется автоматически в зависимости от присваиваемого значения.
          </p>

          <p>
            Если программа попробует обратиться к переменной, которой ещё не присвоено значение, то вместо значения этой переменной будет подставлен ноль.
          </p>

          <h3>Массивы</h3>
          <p>
            Массивы — это группа переменных, объединенных под одним именем, и к которым можно обращатся по их порядковому номеру (индексу).
          </p>

          <p>
            Тип элементов массива будет определен автоматически, но необходимо указать его размерность. Это нужно обязательно сделать до
            первого использования массива. Рекомендуется (но необязательно) выносить подобные объявления в блок инициализации.
          </p>

          <p>
            Формат объявления массива:
            <code>
              <b>arr</b> &lt;имя&gt;[&lt;число&gt; {,&lt;число&gt;, ...}];
            </code>
          </p>
          <p>
            Если в квадратных скобках указано одно число, то массив будет одномерным. Если несколько чисел, то многомерным.
          </p>

          <p>
            Примеры:
            <code>
              <b>arr</b> mas1[10];
              <b>arr</b> mas2[5,7];
            </code>
          </p>
          <p>
            Массив mas1 будет состоять из 10 элементов, а mas2 из 5 массивов по 7 элементов (итого из 35 элементов).
          </p>

          <p>
            Размерность массива может быть не константным числом, а выражением, использующим переменные. Это удобно, например, чтобы
            спросить у пользователя количество входных данных, а затем создать массив нужного размера.
          </p>
          <p>
            Пример:<br/>
            <img src="./images/arr_n.png"/>
          </p>

          <p>
            Для обращения к элементу массива используется следующий синтаксис: <code>array[index]</code>. Если массив многомерный,
            то индексы перечисляются через запятую: <code>array[index1, index2, ...].</code>
          </p>  

          <p>
            Нумерация элементов ведется с нуля. Так у массива, объявленного как <code><b>arr</b> mas[5]</code>, элементы будут <code>mas[0]</code>, <code>mas[1]</code>, <code>mas[2]</code>, <code>mas[3]</code> и <code>mas[4]</code>.
          </p>


          <h3>Выражения</h3>
          <p>
            Вы можете записывать математические выражения с использованием констант, переменных, операторов и функций.
          </p>
          <p>Предусмотрен следующий набор операторов:</p>
          <ul>
            <li>
              Логические: <code><b>or</b></code> (или), <code><b>xor</b></code> (искл. или), <code><b>and</b></code> (и), <code><b>not</b></code> (не).
              Так как отдельный булевый тип не предусмотрен, то логические операции возвращают числа: 0 (ложь) и 1 (истина). Любое число, отличное от нуля, считается истинным значением.
            </li>
            <li>
              Сравнения: <code>&lt;</code> (меньше), <code>&lt;=</code> (не больше), <code>&gt;</code> (больше) , <code>&gt;=</code> (не меньше),
              <code>=</code> (равно), <code>&lt;&gt;</code> (не равно). Возвращают 0 (ложь) или 1 (истина).
              Сравнения над строками производятся лексикографически (по алфавиту), с учётом регистра букв.
            </li>
            <li>
              Арифметические: <code>+</code> (сложение), <code>-</code> (вычитание), <code>*</code> (умножение), <code>/</code> (деление), <code>^</code> (возведение в степень).
            </li>
            <li>
              Целочисленные: <code><b>div</b></code> (частное от деления), <code><b>mod</b></code> (остаток от деления). Примеры:
              <code>
                parts := whole <b>div</b> part_size; 
                rem := a <b>mod</b> b;
              </code>
              Если аргумент не целый то дробная часть будет отброшена.
            </li>
            <li>Операторы над строками: + (конкатенация), и все сравнения.</li>
          </ul>
          <p>
            При записи выражений для изменения приоритетов операторов предусмотрено использование скобок.
          </p>
          <p>
            Примеры:
            <code
              >2; 2+4; a+2; a+b; a*x^2+b*x+c; mas1[1]+a+mas1[2]; a*(b+c);</code
            >
          </p>

          <h3>Функции</h3>
          <p>Предусмотрен следующий набор функций</p>
          <p>Математические:</p>
          <ul>
            <li>
              <b>sqr</b>(&lt;аргумент&gt;) — возведение в квадрат.<br />
              <code>a:=sqr(9) <span>a=81</span> </code>
            </li>
            <li>
              <b>sqrt</b>(&lt;аргумент&gt;) — извлечение корня квадратного.<br />
              <code>a:=sqrt(9) <span>a=3</span></code>
            </li>
            <li>
              <b>abs</b>(&lt;аргумент&gt;) — абсолютное значение (модуль)
              числа.<br />
              <code>a:=abs(-5) <span>a=5</span></code>
            </li>
            <li>
              <b>sign</b>(&lt;аргумент&gt;) — знак числа. Возвращает 1 для
              положительного аргумента, -1 для отрицательного и 0 если аргумент
              равен нулю.<br />
              <code>a:=sign(-5) <span>a=-1</span></code>
            </li>
            <li>
              <b>round</b>(&lt;аргумент&gt;) — округление до ближайшего целого
              числа.<br />
              <code>a:=round(5.5) <span>a=6</span></code>
            </li>
            <li>
              <b>int</b>(&lt;аргумент&gt;) — целая часть числа.<br />
              <code>a:=round(5.5) <span>a=5</span></code>
            </li>
            <li>
              <b>floor</b>(&lt;аргумент&gt;) — округление в сторону меньшего.<br />
              <code>a:=round(5.7) <span>a=5</span></code>
            </li>
            <li>
              <b>ceil</b>(&lt;аргумент&gt;) — округление в сторону большего.<br />
              <code>a:=round(5.3) <span>a=6</span></code>
            </li>
            <li>
              <b>pi</b>() — возвращает число π.<br />
              <code>a:=pi() <span>a=3.1415...</span></code>
            </li>
            <li>
              <b>sin</b>(&lt;аргумент&gt;) — вычисление синуса. Аргумент в
              градусах.
              <code>
                a:=sin(45) <span>a=√2÷2</span>
                a:=sin(90) <span>a=1</span>
              </code>
            </li>
            <li>
              <b>cos</b>(&lt;аргумент&gt;) — вычисление косинуса. Аргумент в
              градусах.<br />
              <code>a:=cos(60) <span>a=0.5</span></code>
            </li>
            <li>
              <b>tan</b>(&lt;аргумент&gt;) — вычисление тангенса. Аргумент в
              градусах.<br />
              <code>a:=tan(45) <span>a=1</span></code>
            </li>
            <li>
              <b>arcsin</b>(&lt;аргумент&gt;) — вычисление арксинуса. Результат
              в градусах.<br />
              <code>a:=arcsin(0.5) <span>a=30</span></code>
            </li>
            <li>
              <b>arccos</b>(&lt;аргумент&gt;) — вычисление арккосинуса.
              Результат в градусах.<br />
              <code>a:=arccos(1/sqrt(2)) <span>a=45</span></code>
            </li>
            <li>
              <b>arctan</b>(&lt;аргумент&gt;) — вычисление арктангенса.
              Результат в градусах.<br />
              <code>a:=arctan(1) <span>a=45</span></code>
            </li>
            <li>
              <b>exp</b>(&lt;аргумент&gt;) — вычисление экспоненты (число <i>e</i> в указанной степени).<br />
              <code>a:=exp(1) <span>a=2.718...</span></code>
            </li>
            <li>
              <b>ln</b>(&lt;аргумент&gt;) — вычисление натурального логарифма.<br />
              <code>a:=ln(2.718) <span>a≈1</span></code>
            </li>
            <li>
              <b>log</b>(&lt;основание&gt;, &lt;аргумент&gt;) — вычисление логарифма от аргумента по указанному основанию.<br />
              <code>a:=log(10, 100) <span>a=2</span></code>
            </li>
            <li>
              <b>random</b>() — случайное число в диапазоне [0, 1).<br />
              <code>a:=random() <span>a=0.123...</span></code>
            </li>
            <li>
              <b>random</b>(&lt;число&gt;) — случайное целое число в диапазоне [0, &lt;число&gt;).<br />
              <code>a:=random(10) <span>a=5</span></code>
            </li>
          </ul>
          <p>Строковые:</p>
          <ul>
            <li>
              <b>Length</b>(&lt;строка&gt;) — возвращает длину строки.
              <code>
                a:=Length('Hello!') <span>a=6</span>
              </code>
            </li>

            <li>
              <b>UpCase</b>(&lt;строка&gt;) — преводит строку в верхний регистр. Возвращает результат.
              <code>
                a:=UpCase('Hello!') <span>a='HELLO!'</span>
              </code>
            </li>

            <li>
              <b>DownCase</b>(&lt;строка&gt;) — преводит строку в нижний регистр. Возвращает результат.
              <code>
                a:=DownCase('Hello!') <span>a='hello!</span>
              </code>
            </li>

            <li>
              <b>Pos</b>(&lt;подстрока&gt;, &lt;строка&gt;) — поиск первого вхождения подстроки в строке. Возвращает номер символа,
              с которого начинается первое вхождение или 0 если вхождение не найдено.
              <code>
                a:=Pos('str', 'Simple string') <span>a=8</span>
              </code>
            </li>

            <li>
              <b>Insert</b>(&lt;подстрока&gt;, &lt;строка&gt;, &lt;позиция&gt;) — вставляет внутрь строки подстроку непосредственно
              перед символом номер &lt;позиция&gt;. Возвращает результат вставки.
              <code>
                a:=Insert('Abe ', 'Honest Lincoln', 8) <span>a='Honest Abe Lincoln'</span>
              </code>
            </li>

            <li>
              <b>Delete</b>(&lt;строка&gt;, &lt;позиция&gt;, &lt;число&gt;) — удаляет из строки &lt;число&gt; символов, начиная
              с символа номер &lt;позиция&gt;. Возвращает результат удаления.
              <code>
                a:=Delete('Test string', 5, 4) <span>a='Testing'</span>
              </code>
            </li>

            <li>
              <b>Copy</b>(&lt;строка&gt;, &lt;позиция&gt;, &lt;число&gt;) — возвращает строку, состоящую из &lt;число&gt; символов строки,
              начиная с символа номер &lt;позиция&gt;.
              <code>
                a:=Copy('abcdefgh', 4, 3) <span>a='def'</span>
              </code>
            </li>

            <li>
              <b>Str</b>(&lt;число&gt;) — возвращает строку, содержащую строковое представление числа.
              <code>
                a:=Str(56) <span>a='56'</span>
              </code>
            </li>

            <li>
              <b>Val</b>(&lt;строка&gt;) — возвращает число содержащееся в строке. Если строка содержит не число, возникает ошибка.
              <code>
                a:=Val('38') <span>a=38</span>
              </code>
            </li>

            <li>
              <b>Order</b>(&lt;строка&gt;) — возвращает числовой код символа.
              <code>
                a:=Order('A') <span>a=65</span>
              </code>
            </li>
            <li>
              <b>Char</b>(&lt;число&gt;) — возвращает строку с символом, имеющем
              код, указанный в аргументе
              <code>
                a:=Char(65) <span>a='A'</span>
              </code>
            </li>
          </ul>
          <p>Файловые</p>
          <ul>
            <li>
              <b>Open</b>(&lt;имя&gt;, [&lt;режим&gt;]) — открывает файл,
              заданный именем для ввода/вывода. Параметр &lt;режим&gt; может
              принимать следующие значения:
              <ul>
                <li>
                  0 — Файл открывается для чтения. Файл должен существовать.
                </li>
                <li>
                  1 — Файл открывается для записи. Если файл не существует, он создается. Если файл существует, он очищается.
                </li>
                <li>
                  2 — Файл открывается для записи в конец файла. Если файл не существует, он создается. Если файл существует, он очищается.
                  При записи в файл информация будет добавлятся в конец файла.
                </li>
              </ul>

              Если параметр &lt;режмим&gt; не указан, то подрузамевается 0. Функция возвращает дескриптор открытого файла, который обычно
              сохраняется в переменной для передачи другим файловым функциям. Дескриптор является целым числом.<br />
              <u>Замечание</u>: настоятельно не рекомендуется изменять значение переменных, содержащих дескрипторы файлов, а также передавать
              любым файловым функциям переменные, содержащие не дескрипторы файлов. В противном случае ошибки не произойдет, но файловая
              функция ничего не совершит.<br />
              <u>Замечание</u>: блок-схемы имеют доступ только к файлам, расположенным в текущем каталоге Конструктора блок-схем и в его подкаталогах.<br />
              <code>
                for_read:=Open('file.txt') <span>для чтения</span>
                for_write:=Open('dir\file.txt', 1) <span>для записи</span>
              </code>
            </li>

            <li>
              <b>Read</b>(&lt;файл&gt;) — читает строку из файла, определяемого дескриптором &lt;файл&gt;, очередную строку и возвращает ее.<br />
              <u>Замечание</u>: возвращаемое значение является строковым. Если Вы хотите прочитать из файла число, воспользуйтесь функцией Val (напр. <code>a:=Val(Read(f))</code>).
              <code>
                str:=Read(f) <span>чтение строки</span>
                num:=Val(Read(f)) <span>чтение числа</span>
              </code>
            </li>

            <li>
              <b>Write</b>(&lt;файл&gt;, ...) — записывает в текущую позицию файла строку.<br />
              <u>Замечание</u>: точнее не записывает, а вставляет. Все данные в файле, находящиеся после текущей позиции сдвигаются на одну
              строку. Если Вы хотите записать строку поверх имеющихся данных используйте функцию WriteOver.<br />
              Функция принимает один параметр или более. Первый параметр — дескриптор файла. Все остальные параметры образуют строку, которая записывается в файл.
              <code>
                Write(f, 'Hello, World!');
                Write(f, 'a=', a, ' b=', b);
              </code>
            </li>

            <li>
              <b>WriteOver</b>(&lt;файл&gt;, ...) — записывает в текущую позицию файла строку, замещая строку, находящуюся в текущей позиции.<br />
              Функция принимает один параметр или более. Первый параметр — дескриптор файла. Все остальные параметры образуют строку, которая записывается в файл.
              <code>
                WriteOver(f, "This string'll repace existing");
              </code>
            </li>

            <li>
              <b>Seek</b>(&lt;файл&gt;, &lt;позиция&gt;) — перемещает текущую позицию в файле &lt;файл&gt; на строку номер &lt;позиция&gt;. Строки в файлах нумеруются с нуля.
              <code>
                Seek(f, 0) <span>в начало файла</span>
                Seek(f, FileSize(f)) <span>в конец файла</span>
              </code>
            </li>

            <li>
              <b>FileSize</b>(&lt;файл&gt;) — возвращает количество строк в файле.
              <code>
                file_size:=FileSize(f)
              </code>
            </li>

            <li>
              <b>EOF</b>(&lt;файл&gt;) — возвращает 1, если текущая позиция в файле находится в конце файла и 0 в другом случае. Поэтому эта
              функция может использоваться в блоках ветвления, например в конструкции &lt;пока&gt; not EOF(f) ...
              <code>
                end_of_file:=EOF(f);
                &lt;если&gt; not EOF(f) ...
              </code>
            </li>

            <li>
              <b>FilePos</b>(&lt;файл&gt;) — возвращает номер строки в файле, на которой находится текущая позиция.
              <code>
                in_begining := (FilePos(f)=0);
                &lt;пока&gt; FilePos(f) &lt; FileSize(F) ...
              </code>
            </li>

            <li>
              <b>Close</b>(&lt;файл&gt;) — закрывает файл и освобождает ресурсы, выделенные для работы с файлом. Если файл был открыт для записи
              (с параметрами 1 и 2 функции Open), то изменения, внесенные в файл сохраняются на диск.<br />
              <u>Замечание</u>: если файл был открыт для записи и Вы не вызвали функцию Close, то любые внесенные изменения в файле <u>не сохранятся</u>.
              <code>
                Close(f)
              </code>
            </li>
          </ul>

          <p>Специальные</p>
          <ul>
            <li>
              <b>message</b>(&lt;строка&gt;) — выводит строку во всплывающем сообщении, а не в окно вывода. Выполнение программы останавливается пока пользователь на нажмёт ОК.
              <code>
                message('Hello, World!')
              </code>
            </li>
            <li>
              <b>calc</b>(&lt;выражение&gt;) — вычисляет значение выражения и возвращает его. Выражение может быть задано строкой или строковой переменной и должно подчиняться тому
              же синтаксису формального языка, который описывается на данной странице. Можно использовать любые перечисленные в этом документе функции, но обращаться к переменным нельзя,
              так как вычисление происходит в изолированном контексте.
              <code>
                a:=calc('2+2') <span>a=4</span>
              </code>
            </li>
            <li>
              <b>calc</b>(&lt;выражение&gt;, &lt;значение&gt;) — вычисляет значение выражения с переменной <code>x</code> и возвращает его. Переменная <code>x</code> при вычислении
              выражения будет равна значению, указанному во втором аргументе.
              <code>
                a:=calc('x^2', 5) <span>a=25</span>
              </code>
            </li>
            <li>
              <b>exec</b>(&lt;код&gt;) — выполняет оператор (или несколько, разделённых точкой с запятой) на языке блок-схем. Выполнение происходит в общем контексте, поэтому можно
              обращаться к переменным, объявленным в основной программе и даже изменять их значения. Функция exec ничего не возвращает.
              <code>
                exec('a:=5') <span>a=5</span>
              </code>
            </li>
          </ul>
          <p>&nbsp;</p>
        </td>
      </tr>
    </table>
    <div align="center">
      <center>
        <table
          width="100%"
          bgcolor="#E0E0E0"
          bordercolorlight="#A0A0A0"
          border="1"
          bordercolordark="#F0F0F0"
        >
          <tr>
            <td>
              <table width="100%">
                <tr>
                  <td>(C) С.Г. Кузин, Р.О. Митин, И.С. Скрибловский</td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
      </center>
    </div>
  </body>
</html>
