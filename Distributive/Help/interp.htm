<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" type="text/css" href="style.css">
<title>Введение в "Конструктор блок-схем"</title>
</head>

<body topmargin="0" leftmargin="0" bgcolor="#E0E0E0">
<div align="center">
  <center>

<table width="100%"  bgcolor="#E0E0E0"  bordercolorlight="#A0A0A0" border="1" bordercolordark="#FFFFFF">
<tr>
<td>  
<table width="100%">
<tr>
<td><a href="index.htm">Введение</a> | <a href="sch.htm">Блок-схемы</a> |
  <a href="interp.htm">Выражения</a> | <a href="operat.htm">Операторы</a> |
  <a href="program.htm">Среда</a> | <a href="example.htm">Примеры</a> |
  <a href="online.htm">Online</a></td>
</tr>
</table>
</td>
</tr>
</table>

  </center>
</div>
<table cellpadding="10" width="100%" bgcolor="#FFFFFF">
<tr>
<td>
<h2>Запись выражений&nbsp;</h2>
<h3>Константы
</h3>
<p>Числовые константы записываются в
десятичном формате с точкой или без.
</p>
<p>Примеры: <code>2; 177; 255.5; 0.5;</code>
</p>
<p>Строковые константы записываются в одинарных кавычках.
<p>Примеры: <code>'строка'; 'Hello, World!'; '123654'</code>
<h3>Переменные
</h3>
<p>Переменные - это ячейки памяти, где программа может хранить
нужные ей значения.
<p>Имя переменной - последовательность латинских букв,
цифр, знака &quot;_&quot;, начинающаяся с латинской буквы
или знака &quot;_&quot;.
<p>Примеры: <code>a; varname; _MyVar_; _; param56</code>
<p>При использовании имен переменных в выражениях, имя переменной
заменяется хранящимся в ней  значением.
<p>Предусмотрены вещественный и строковый
типы данных, хранящихся в переменных.
</p>
<p>Для скалярных типов объявления
переменной не требуется. Тип переменной
определяется автоматически в зависимости
от присваиваемого значения.
<p>Переменные, которым еще не присвоено значение считаются числовыми, а их значение равным 0.
Это следует иметь ввиду, т.к. передача таких переменных в качестве параметра
в функцию, ожидающую число вызовет ошибку.
</p>
<h3>Массивы
</h3>
<p>Массивы - это группы элементов, каждый из которых является переменной, объединенных
под одним именем, и к которым можно обращатся по их порядковому номеру (индексу).
<p>Тип элементов массива будет определен
автоматически и необходимо указать лишь
его размерность. Это нужно обязательно
сделать до первого использования массива.
Рекомендуется (но это совершенно
необязательно) выносить подобные
объявления в блок инициализации.&nbsp;
</p>
<p>Формат:
</p>
<p><code><b>arr</b> &lt;имя&gt;[&lt;выражение&gt; {,&lt;выражение&gt;}];</code>
</p>
<p>Фигурные скобочки означают повторение
любого количества раз. Ограничено
особенностями версии интерпретатора.
<p>Примеры: <code><b>arr</b> mas1[10]; <b>arr</b> mas2[5,7];</code>
<p>Массив mas1 будет состоять из 10 элементов, а
mas2 из 5 массивов по 7 элементов (итого из 35
элементов).
<p><u>Замечание:</u> Нумерация элементов ведется с нуля. Так
для примера mas1 у нас будут элементы mas1[0],
mas1[1], mas1[2], ..., mas1[9].
<p>Обращение к элементу массива <code>&lt;имя&gt;[&lt;выражение&gt;</code>
{,&lt;выражение&gt;}]
<p>Пример mas1[3]; Обращение к 4-ому элементу
массива mas1. Или mas2[1,1] - обращение к элементу
1,1;
<h3>Выражения </h3>
<p>Вы можете записывать математические
выражения с использованием констант,
переменных, операторов и функций.
</p>
<p>Предусмотрен следующий набор операторов:
</p>
<ul>
  <li>Логические: or (или), xor (искл. или), and (и), not (не)</li>
  <li>Сравнения: &lt; (меньше), &lt;= (не больше), &gt; (больше)
    , &gt;= (не меньше) , = (равно), &lt;&gt; (не равно)</li>
  <li>Математические: + (сложение), - (вычитание),
    * (умножение), / (деление)</li>
  <li>Целочисленные: div (частное от деления), mod
    (остаток от деления). Если аргумет не
    целый то дробная часть будет отброшена.</li>
  <li>Работы со строками: + (конкатенация), и
    все сравнения.</li>
</ul>
<p>При записи выражений для изменения
приоритетов операторов предусмотрено
использование скобок.
</p>
<p>Примеры: <code>2; 2+4; a+2; a+b; a*x*x+b*x+c; mas1[1]+a+mas1[2]; a*(b+c);</code>
</p>
<h3>Функции
</h3>
<p>Предусмотрен следующий набор функций
</p>
<p>Математические:</p>
<ul>
  <li><b>sin</b>(&lt;аргумент&gt;) - вычисление синуса. Аргумент в градусах. <br>
    <code>a:=sin(45); {a=sqrt(2)/2}<br>
    a:=sin(90); {a=1}</code>
  <li><b>cos</b>(&lt;аргумент&gt;) - вычисление косинуса. Аргумент в градусах.<br>
    <code>a:=cos(60); {a=0.5}</code>
  <li><b>tan</b>(&lt;аргумент&gt;) - вычисление тангенса. Аргумент в градусах.<br>
    <code>a:=tan(45); {a=1} </code>
  <li><b>arcsin</b>(&lt;аргумент&gt;) - вычисление арксинуса. Результат в градусах.<br>
    <code> a:=arcsin(0.5); {a=30}</code>
  <li><b>arccos</b>(&lt;аргумент&gt;) - вычисление арккосинуса. Результат в градусах.<br>
    <code> a:=arccos(1/sqrt(2)); {a=45}</code>
  <li><b>arctan</b>(&lt;аргумент&gt;) - вычисление арктангенса. Результат в градусах.<br>
    <code> a:=arctan(1); {a=45} </code>
  <li><b>sqr</b>(&lt;аргумент&gt;) - возведение в квадрат.<br>
    <code> a:=sqr(9); {a=81} </code>
  <li><b>sqrt</b>(&lt;аргумент&gt;) - извлечение корня квадратного.<br>
    <code> a:=sqrt(9); {a=3} </code>
</ul>
<p>Строковые:</p>
<ul>
  <li><b>Length</b>(&lt;строка&gt;) - возвращает целое число равное длине строки.<br>
    <code> a:=Length('Hello!'); {a=6}</code>
  <li><b>UpCase</b>(&lt;строка&gt;) - преводит строку в верхний регистр. Возвращает
    результат.<br>
    <code> a:=UpCase('Hello!'); {a='HELLO!'} </code>
  <li><b>DownCase</b>(&lt;строка&gt;) - преводит строку в нижний регистр. Возвращает
    результат.<br>
    <code> a:=DownCase('Hello!'); {a='hello!} </code>
  <li><b>Pos</b>(&lt;подстрока&gt;, &lt;строка&gt;) - поиск первого вхождения подстроки
    в строке. Возвращает номер символа, с которого начинается первое вхождение
    или 0 если вхождение не найдено.<br>
    <code> a:=Pos('str', 'Simple string'); {a=8} </code>
  <li><b>Insert</b>(&lt;подстрока&gt;, &lt;строка&gt;, &lt;позиция&gt;) - вставляет внутрь строки
    подстроку непосредственно перед символом номер &lt;позиция&gt;. Возвращает результат вставки. <br>
    <u>Замечание</u>: если параметры &lt;подстрока&gt; или &lt;строка&gt; заданы переменными, то значения
    этих переменных <b> не </b> меняются.<br>
    <code> a:=Insert('Abe ', 'Honest Lincoln', 8); {a='Honest Abe Lincoln'}</code>
  <li><b>Delete</b>(&lt;строка&gt;, &lt;позиция&gt;, &lt;число&gt;) - удаляет из строки &lt;число&gt; символов,
    начиная с символа номер &lt;позиция&gt;. Возвращает результат удаления. <br>
    <u>Замечание</u>: если параметр &lt;строка&gt; задан переменной, то значение
    этой переменной <b> не </b> меняется.<br>
    <code> a:=Delete('Test string', 5, 4); {a='Testing'}</code>
  <li><b>Copy</b>(&lt;строка&gt;, &lt;позиция&gt;, &lt;число&gt;) - возвращает строку, состоящую из  &lt;число&gt;
    символов строки, начиная с символа номер &lt;позиция&gt;.<br>
    <code> a:=Copy('abcdefgh', 4, 3); {a='def'} </code>
  <li><b>Str</b>(&lt;число&gt;) - возвращает строку, содержащую строковое представление числа.<br>
    <code> a:=Str(56); {a='56'} </code>
  <li><b>Val</b>(&lt;строка&gt;) - возвращает число содержащееся в строке. Если строка содержит не число,
    возникает ошибка.<br>
    <code> a:=Val('38'); {a=38} </code>
</ul>
<p>Файловые</p>
<ul>
  <li><b>Open</b>(&lt;имя&gt;, [&lt;режим&gt;]) - открывает файл, заданный именем для ввода/вывода. Параметр
    &lt;режим&gt; может принимать следующие значения:
      <ul>
        <li>0 - Файл открывается для чтения. Файл должен существовать.
        <li>1 - Файл открывается для записи. Если файл не существует, он создается. Если файл существует, он очищается.
        <li>2 - Файл открывается для записи в конец файла. Если файл не существует, он создается. Если файл существует,
          он очищается. При записи в файл информация будет добавлятся в конец файла. 
      </ul>
    Если параметр &lt;режмим&gt; не указан, то подрузамевается 0.
    Функция возвращает дескриптор открытого файла, который обычно сохраняется в переменной для передачи другим
    файловым функциям. Дескриптор является целым числом.<br>
    <u>Замечание</u>: настоятельно нерекомендуется изменять значение переменных, содержащих дескрипторы файлов, а также
      передавать любым файловым функциям переменные, содержащие не дескрипторы файлов. В противном случае ошибки не
      произойдет, но файловая функция ничего не совершит.<br>
    <u>Замечание</u>: блок-схемы имеют доступ только к файлам, расположенным в текущем каталоге Конструктора блок-схем
      и в его подкаталогах.<br>
    <code>for_read:=Open('file.txt'); {для чтения}<br>
    for_write:=Open('dir\file.txt', 1); {для записи}</code>
   <li><b>Read</b>(&lt;файл&gt;) - читает строку из файла, определяемого дескриптором &lt;файл&gt;, очередную строку и
     возвращает ее.<br>
     <u>Замечание</u>: возвращаемое значение является строковым. Если Вы хотите прочитать из файла число, воспользуйтесь
       функцией Val (напр. a:=Val(Read(f))).<br>
     <code>str:=Read(f); {чтение строки}  <br>
           num:=Val(Read(f)); {чтение числа}</code>
   <li><b>Write</b>(&lt;файл&gt;, ...) - записывает в текущую позицию файла строку.<br>
     <u>Замечание</u>: точнее не записывает, а вставляет. Все данные в файле, находящиеся после текущей позиции
       сдвигаются на одну строку. Если Вы хотите записать строку поверх имеющихся данных используйте функцию
       WriteOver.<br>
     Функция принимает один параметр или более. Первый параметр - дескриптор файла. Все остальные параметры образуют
     строку, которая записывается в файл.<br>
     <code>Write(f, 'Hello, World!');<br>
           Write(f, 'a=', a, ' b=', b);</code>
   <li><b>WriteOver</b>(&lt;файл&gt;, ...) - записывает в текущую позицию файла строку, замещая строку, находящуюся
     в текущей позиции.<br>
     Функция принимает один параметр или более. Первый параметр - дескриптор файла. Все остальные параметры образуют
     строку, которая записывается в файл.<br>
     <code>WriteOver(f, 'This string''ll repace existing');</code>
   <li><b>Seek</b>(&lt;файл&gt;, &lt;позиция&gt;) - перемещает текущую позицию в файле &lt;файл&gt; на строку номер &
     lt;позиция&gt;. Строки в файлах нумеруются с нуля.<br>
     <code>Seek(f, 0); {в начало файла}<br>
     Seek(f, FileSize(f)); {в конец файла}</code>
   <li><b>FileSize</b>(&lt;файл&gt;) - возвращает количество строк в файле.<br>
     <code>file_size:=FileSize(f);</code>
   <li><b>EOF</b>(&lt;файл&gt;) - возвращает 1, если текущая позиция в файле находится в конце файла и 0 в другом
     случае. Поэтому эта функция может использоваться в блоках ветвления, например в конструкции &lt;пока&gt; not
     EOF(f) ...<br>
     <code>end_of_file:=EOF(f);<br>
       &lt;если&gt; not EOF(f) ...</code>
   <li><b>FilePos</b>(&lt;файл&gt;) - возвращает номер строки в файле, на которой находится текущая позиция.<br>
     <code>in_begin:=(FilePos(f)=0);<br>
     &lt;пока&gt; FilePos(f)&lt;FileSize(F) ...</code>
   <li><b>Close</b>(&lt;файл&gt;) - закрывает файл и освобождает ресурсы, выделенные для работы с файлом. Если
     файл был открыт для записи (с параметрами 1 и 2 функции Open), то изменения, внесенные в файл сохраняются на диск.<br>
     <u>Замечание</u>: если файл был открыт для записи и Вы не вызвали функцию Close, то любые внесенные Вами изменения
       в файле <u>не сохранятся</u>.<br>
     <code>Close(f);</code>
</ul>
<p>&nbsp;</p>
</td>
</tr>
</table>
<div align="center">
  <center>

<table width="100%"  bgcolor="#E0E0E0"  bordercolorlight="#A0A0A0" border="1" bordercolordark="#F0F0F0">
<tr>
<td>  
<table width="100%">
<tr>
<td>(C) С.Г. Кузин, Р.О. Митин, И.С. Скрибловский</td>
</tr>
</table>
</td>
</tr>
</table>

  </center>
</div>

</body>

</html>
